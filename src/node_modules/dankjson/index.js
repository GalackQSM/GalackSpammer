// System modules
const fs = require("fs");
const path = require("path");

// Community modules
const Promise = require("promise");

// Config singleton
let config = {};

// Get object from file
function read(file) {
    return new Promise((resolve, reject) => {
        fs.readFile(file, (error, data) => {
            if (error) return reject(error);
            try {
                resolve(JSON.parse(data));
            } catch (error) {
                reject(error);
            }
        });
    });
}

// Write object to file
function write(file, object, tabSize) {
    return new Promise((resolve, reject) => {
        try {
            let data = tabSize ? JSON.stringify(object, null, tabSize) : JSON.stringify(object);
            fs.writeFile(file, data, error => {
                if (error) return reject(error);
                resolve();
            });
        } catch (error) {
            reject(error);
        }
    });
}

// Get object from file, if the file doesn't exist create it
function readConfig(file, object, tabSize) {
    return new Promise((resolve, reject) => {
        fs.access(file, fs.constants.F_OK, error => {
            if (error && object) return write(file, object, tabSize).then(() => {
                config[path.basename(file).split(".")[0]] = object;
                resolve();
            }).catch(error => {
                reject(error);
            });

            read(file).then(object => {
                config[path.basename(file).split(".")[0]] = object;
                resolve();
            }).catch(error => {
                reject(error);
            });
        });
    });
}

module.exports = function (first, second, third) {
    return new Promise((resolve, reject) => {
        if (!first) return resolve(config);

        if (first instanceof Array) {
            let promises = first.map(file => {
                if (second instanceof Array) return readConfig(file, second[first.indexOf(file)], third);
                return readConfig(file);
            });

            Promise.all(promises).then(() => {
                resolve(config);
            }).catch(error => {
                reject(error);
            });
        } else {
            if (!second) return read(first).then(object => {
                resolve(object);
            }).catch(error => {
                reject(error);
            });

            write(first, second, third).then(() => {
                resolve();
            }).catch(error => {
                reject(error);
            });
        }
    });
}